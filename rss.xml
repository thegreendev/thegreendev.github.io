<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>&lt; Dev Nhà Người Ta /&gt;</title>
    <link>https://devnhanguoita.com/</link>
    <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description>Giúp dev nhà mình trở thành dev con nhà người ta</description>
    <pubDate>Sat, 14 Oct 2017 05:50:20 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Suy nghĩ như một lập trình viên</title>
      <link>https://devnhanguoita.com/posts/Suy-nghi-nhu-mot-lap-trinh-vien/</link>
      <guid>https://devnhanguoita.com/posts/Suy-nghi-nhu-mot-lap-trinh-vien/</guid>
      <pubDate>Sat, 14 Oct 2017 02:20:07 GMT</pubDate>
      <description>
      
        Tôi không biết javascript, tôi không thể viết cái component này được. Tôi nghĩ là tôi không thể làm nó được đâu, vì tôi không biết cách suy nghĩ như một lập trình viên được
      
      </description>
      
      <content:encoded><![CDATA[<blockquote>
<p>Mình không thích dùng từ “lập trình viên” lắm, nhưng lại thích để tiếng Việt trên cái tiêu đề, nên trong bài viết mình sẽ ghi là “programmer” nhé 😎<br>Mình chỉ viết lại theo cách hiểu của mình từ bài này: <a href="https://medium.freecodecamp.org/how-to-think-like-a-programmer-3ae955d414cd" target="_blank" rel="external">How to think like a programmer</a>. Vì vậy, khuyến khích các bạn đọc bài viết gốc để hiểu rõ và nắm bắt được cái tinh thần tác giả muốn nói hơn, chào thân ái! 😎</p>
</blockquote>
<p>“Tôi không biết javascript, tôi không thể viết cái component này được, đầu óc tôi trống rỗng mỗi khi tôi bắt đầu viết một đoạn code. Tôi nghĩ là tôi không thể làm nó được đâu, vì tôi không biết cách suy nghĩ như một programmer”</p>
<p>Đây có vẻ như một vấn đề hay gặp của bất cứ ai khi mới bắt đầu học lập trình nhỉ? Bạn nghĩ là bạn không suy nghĩ như một programmer được?, nhưng không hẳn như vậy đâu, để giải quyết sự sợ hãi này, hãy làm theo 4 bước sau:</p>
<h3 id="Buoc-1-phan-chia-bai-toan-thanh-nhung-bai-toan-nho-hon"><a href="#Buoc-1-phan-chia-bai-toan-thanh-nhung-bai-toan-nho-hon" class="headerlink" title="Bước 1, phân chia bài toán thành những bài toán nhỏ hơn"></a>Bước 1, phân chia bài toán thành những bài toán nhỏ hơn</h3><p>Mình đến với một bài toán nghe quen quen nha: “Làm sao để nhét 1 con voi vào tủ lạnh?”<br>Đa số sẽ có 3 bước sau:</p>
<ul>
<li>Mở cửa tủ lạnh</li>
<li>Nhét con voi vào</li>
<li>Đóng cửa lại</li>
</ul>
<p>Okie, done, vấn đề được giải quyết.</p>
<p>Tuy nhiên, câu trả lời trên là một ví dụ tốt nhất cho việc tại sao bạn lại thấy khó khăn khi phải đối mặt với một file javascript trống rỗng. Bạn thiếu <strong>các bước thực hiện</strong>.</p>
<p>Nếu suy nghĩ một cách logic hơn, bạn sẽ nhận ra một số vấn đề vẫn còn chưa được trả lời như:</p>
<ul>
<li>chúng ta đang nói về cái tủ lạnh nào?</li>
<li>chúng ta nhắc đến loại voi nào?</li>
<li>nếu con voi quá lớn, không vừa với cái tủ lạnh thì chúng ta sẽ làm như thế nào?</li>
<li>bạn sẽ tìm thấy con voi ở đâu?</li>
<li>bạn vận chuyển con voi đến cái tủ lạnh bằng cách nào?</li>
</ul>
<p>Khi code cũng vậy, bạn phải trả lời được những câu hỏi nhỏ như vậy mà bạn có thể nghĩ ra. Đó là lí do vì sao bước đầu tiên là <strong>chia nhỏ vấn đề ra</strong>.</p>
<h3 id="Buoc-2-tim-giai-phap-cho-nhung-bai-toan-nho-hon-do"><a href="#Buoc-2-tim-giai-phap-cho-nhung-bai-toan-nho-hon-do" class="headerlink" title="Bước 2, tìm giải pháp cho những bài toán nhỏ hơn đó"></a>Bước 2, tìm giải pháp cho những bài toán nhỏ hơn đó</h3><p>Tiếp theo là đi <strong>tìm giải pháp cho mỗi vấn đề đã chia nhỏ</strong> ở trên. Bạn phải càng chi tiết càng tốt.</p>
<ul>
<li>cái tủ lạnh nào? -&gt; tủ lạnh trong nhà bếp của bạn</li>
<li>loại voi nào? -&gt; voi châu Phi</li>
<li>nếu con voi to quá thì làm sao? -&gt; dùng súng thu nhỏ để thu nhỏ con voi lại (doreamon fan 😎)</li>
<li>tìm thấy con voi ở đâu? -&gt; châu Phi</li>
<li>bạn sẽ vận chuyển con voi như thế nào? -&gt; bỏ nó vào túi xách sau khi đã thu nhỏ, mang lên máy bay và bay về ✈️</li>
</ul>
<p>Một khi bạn đã có tất cả câu trả lời cho những câu hỏi nhỏ, hãy gom nó lại để giải quyết bài toán lớn của chúng ta.</p>
<h3 id="Buoc-3-tap-hop-cac-giai-phap-do-lai-mot-cach-chat-che"><a href="#Buoc-3-tap-hop-cac-giai-phap-do-lai-mot-cach-chat-che" class="headerlink" title="Bước 3, tập hợp các giải pháp đó lại một cách chặt chẽ"></a>Bước 3, tập hợp các giải pháp đó lại một cách chặt chẽ</h3><p>Okie, đến đây thì bước thứ 3 đơn giản là gộp các giải pháp cho các bài toán nhỏ lại một cách hợp lí, để giải quyết bài toán lớn nhét-con-voi-vào-tủ-lạnh của chúng ta.</p>
<p>Quy trình sẽ như thế này:</p>
<ol>
<li>mượn cây súng thu nhỏ của doremon</li>
<li>bay đến châu Phi</li>
<li>đến công viên voi Addo ở Nam Phi</li>
<li>tìm một con voi</li>
<li>bắn nó với cây súng thu nhỏ</li>
<li>bỏ con voi vào túi xách</li>
<li>bay trở về nhà</li>
<li>đặt con voi vào tủ lạnh</li>
</ol>
<h3 id="Buoc-4-refactor-cai-tien"><a href="#Buoc-4-refactor-cai-tien" class="headerlink" title="Bước 4, refactor, cải tiến"></a>Bước 4, refactor, cải tiến</h3><p>Bạn chịu khó xem hết ví dụ thực tế của tác giả nha 🤣<br>Ví dụ của tác giả về việc tạo một cái nút, khi click vào đó thì sẽ hiển thị thanh menu ở sidebar. Một ví dụ đơn giản, nhưng bạn hãy đọc để xem tác giả đã chia nhỏ, phân tích và giải quyết vấn đề như thế nào.<br>Trong đó bao gồm bước 4, refactor code và cải tiến nó.</p>
<h3 id="Tum-lai"><a href="#Tum-lai" class="headerlink" title="Túm lại,"></a>Túm lại,</h3><p>Suy nghĩ như một programmer cũng đơn giản thôi. Yếu tố quan trọng là cách bạn chia nhỏ vấn đề thành những vấn đề nhỏ hơn như thế nào. Khi đã có những bài toán nhỏ, bạn sẽ tìm giải pháp cho chúng, và code. Trong lúc đó bạn cũng sẽ gặp các vấn đề khác mà mình chưa nghĩ ra, hãy giải quyết nó luôn.</p>
]]></content:encoded>
      
      <comments>https://devnhanguoita.com/posts/Suy-nghi-nhu-mot-lap-trinh-vien/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Những nguyên lí cơ bản của chủ nghĩa code sạch</title>
      <link>https://devnhanguoita.com/posts/Nhung-nguyen-li-co-ban-cua-chu-nghia-clean-code/</link>
      <guid>https://devnhanguoita.com/posts/Nhung-nguyen-li-co-ban-cua-chu-nghia-clean-code/</guid>
      <pubDate>Sat, 23 Sep 2017 03:17:05 GMT</pubDate>
      <description>
      
        Bạn có biết đơn vị để đo code của bạn có sạch hay không là số lần WTF trên mỗi phút khi có người review code?
      
      </description>
      
      <content:encoded><![CDATA[<p><img src="/img/clean-code-principle-1.jpeg" alt="clean-code"></p>
<h2 id="Code-sach-la"><a href="#Code-sach-la" class="headerlink" title="Code sạch là"></a>Code sạch là</h2><p>Code không bốc mùi (smell code 💩). Nhìn lại hình ở trên tí nhé ☝️, chất lượng của code được đo bằng đơn vị số lần wtf mỗi phút. Bạn viết code sao mà những người review, dev khác không phải thốt lên wtf như vậy là sạch 😀</p>
<h2 id="Tai-sao-phai-code-sach"><a href="#Tai-sao-phai-code-sach" class="headerlink" title="Tại sao phải code sạch?"></a>Tại sao phải code sạch?</h2><p>Ờ, đó là trách nhiệm của bạn mà 😎.<br>Codebase cũng giống như database của một website vậy, tỉ lệ đọc:ghi thường là 10:1. Mọi người ai cũng phải đọc được code rồi mới viết code phải không nào? Vì vậy, hãy viết code sao cho người khác (hoặc chính bạn trong tương lai) có thể đọc hiểu được.</p>
<p>Mục đích của code sạch:</p>
<ul>
<li>Thay đổi code nhanh hơn</li>
<li>Đọc hiểu code dễ hơn</li>
</ul>
<p>Bạn không muốn mất 2h để đọc hiểu một module đáng lẽ chỉ cần đọc trong vài phút chứ?</p>
<h2 id="Nhung-nguyen-li-co-ban-cua-chu-nghia-code-sach"><a href="#Nhung-nguyen-li-co-ban-cua-chu-nghia-code-sach" class="headerlink" title="Những nguyên lí cơ bản của chủ nghĩa code sạch"></a>Những nguyên lí cơ bản của chủ nghĩa code sạch</h2><h3 id="1-Dat-ten"><a href="#1-Dat-ten" class="headerlink" title="1. Đặt tên"></a>1. Đặt tên</h3><p>Mọi thứ đều có tên. Chúng ta đặt tên cho mọi thứ. Tên để nhận dạng một đối tượng.<br>Okie, vậy tôi nên đặt tên trong code của tôi như thế nào? Có vài điều nên chú ý sau:</p>
<ul>
<li>Tên phải mô tả được đối tượng (biến đó lưu cái gì, hàm đó làm gì, class đó là gì,..)</li>
<li>Tên có thể tìm kiếm được.</li>
<li>Tránh sử dụng từ viết tắt, từ dễ gây nhầm lẫn.</li>
</ul>
<p>Xem thêm bài về việc đặt tên <a href="/posts/Code-sach-nha-nguoi-ta-Dat-ten-cho-con/">ở đây</a> nhé.</p>
<h3 id="2-Comment"><a href="#2-Comment" class="headerlink" title="2. Comment"></a>2. Comment</h3><blockquote>
<p>Code never lies. Comments sometimes do.</p>
</blockquote>
<p>Vâng, code thì không bao giờ nói dối bạn, còn comment thì có đấy. Bạn đã bao giờ gặp trường hợp code một đường, comment cho đoạn code đó một nẻo chưa?</p>
<p>Bạn không cần phải có comment. Yeap, tên là tài liệu đầy đủ và tốt nhất rồi :), không cần thêm comment, chú thích làm gì nếu bạn không thật sự cần.</p>
<p>Trong trường hợp vẫn cần comment, hãy:</p>
<ul>
<li>Cố gắng giải thích bằng code của mình, đừng comment 😀</li>
<li>Viết comment ngắn gọn, đừng dư thừa.</li>
<li>Đừng comment code không dùng, hãy xoá nó luôn đi.</li>
</ul>
<h3 id="3-Format"><a href="#3-Format" class="headerlink" title="3. Format"></a>3. Format</h3><p>Ông bà ta nói “tốt gỗ hơn tốt nước sơn”, cơ mà không phải lúc nào cũng lo chọn gỗ tốt mà không quan tâm đến nước sơn. Ai chả thích cái đẹp cơ chứ 😛. Code cũng vậy, dù bạn có viết tốt như thế nào, mà trình bày code xấu tệ thì.. cũng chưa sạch được.</p>
<p>Gần đây mình có đọc bài viết về tại sao DHH - cha đẻ của Rails từ chối 80% ứng viên (bài viết <a href="https://medium.com/@christophelimpalair/why-the-founder-of-rails-automatically-rejects-80-of-software-engineer-applicants-4e2a4d255f58" target="_blank" rel="external">tại đây</a>). Có một ý trong đó nói về “Your code looks terrible!”. Nếu là người tuyển dụng, mình cũng sẽ không tuyển những người trình bày code xấu như hình dưới đây :)</p>
<p><img src="/img/clean-code-principle-format.png" alt="terrible format"></p>
<p>Để trình bày tốt hơn, có một số lưu ý như:</p>
<ul>
<li>Sử dụng một loại indentation thống nhất, tab cũng được, space cũng được, miễn sao thống nhất với nhau.</li>
<li>Để ý đến số kí tự mỗi dòng, số dòng của mỗi class.</li>
</ul>
<p>Về cấu trúc của source code:</p>
<ul>
<li>Phân biệt các phần theo chiều dọc.</li>
<li>Các hàm phụ thuộc hoặc tương tự nên được đặt gần nhau.</li>
<li>Đặt các hàm của bạn theo thứ tự trên xuống.</li>
</ul>
<h3 id="4-Test-test-test-va-test"><a href="#4-Test-test-test-va-test" class="headerlink" title="4. Test, test, test và test"></a>4. Test, test, test và test</h3><p>Test để đảm bảo code của bạn chạy đúng như mong đợi.</p>
<p>Áp dụng luật FIRST cho test:</p>
<ul>
<li>Fast: test phải chạy nhanh</li>
<li>Independent: test phải không phụ thuộc lẫn nhau</li>
<li>Repeatable: chạy được ở những môi trường khác nhau</li>
<li>Self-Validating: test phải có một output, là pass hay failed.</li>
<li>Timely: test code phải được viết trước khi viết production code.</li>
</ul>
<h3 id="5-Kho-thoang"><a href="#5-Kho-thoang" class="headerlink" title="5. Khô thoáng"></a>5. Khô thoáng</h3><p>Code của bạn phải luôn luôn khô thoáng, à nhầm, DRY nhé.<br>DRY là viết tắt của từ <code>Dont&#39;t Repeat Yourself</code>, tức là đừng lặp lại chính mình.</p>
<p>Đừng viết lại những đoạn code giống nhau ở những chỗ khác nhau. Điều này sẽ làm cho việc maintain khó khăn hơn, bạn sẽ bị thiếu khi sửa code ở chỗ này nhưng lại quên ở chỗ khác, và tất nhiên đây là một nguyên nhân gây ra bug 🐛.</p>
<p>Mỗi khi thấy mình phải viết những đoạn code giống nhau ở những nơi khác nhau, đó là lúc bạn nên tìm cách refactor để luôn DRY nhé.</p>
<hr>
]]></content:encoded>
      
      <comments>https://devnhanguoita.com/posts/Nhung-nguyen-li-co-ban-cua-chu-nghia-clean-code/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Chỉnh userAgent trong Chrome</title>
      <link>https://devnhanguoita.com/posts/Chinh-userAgent-trong-Chrome/</link>
      <guid>https://devnhanguoita.com/posts/Chinh-userAgent-trong-Chrome/</guid>
      <pubDate>Wed, 20 Sep 2017 13:43:15 GMT</pubDate>
      <description>
      
        Thay đổi user agent để test trang web của bạn một cách nhanh chóng trên Chrome Devtool không cần cài thêm extension
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="userAgent"><a href="#userAgent" class="headerlink" title="userAgent"></a>userAgent</h3><p>Thỉnh thoảng bạn muốn giả lập để kiểm tra trang web của mình có traffic đến từ những browser khác nhau như thế nào. Chrome và các trình duyệt khác đều cung cấp một nơi để bạn thay đổi các user agent này, vì vậy bạn có thể đổi user agent mà không cần phải cài thêm extension nào cả.</p>
<p>Dưới đây là cách thay đổi trên Chrome nhé.</p>
<h3 id="Thay-doi-userAgent"><a href="#Thay-doi-userAgent" class="headerlink" title="Thay đổi userAgent"></a>Thay đổi userAgent</h3><ol>
<li><p>Mở Devtool lên</p>
<p><code>More Tools &gt; Developer Tools</code>, hoặc phím tắt <code>Ctrl+Shift+I</code>(windows, linux), <code>Cmd+Option+I</code>(mac)</p>
<p><img src="/img/chinh-useragent-1.png" alt=""></p>
</li>
<li><p>Chọn menu Network Conditions</p>
<p><img src="/img/chinh-useragent-2.png" alt=""></p>
</li>
<li><p>Trong tab Network Condition, bỏ chọn ‘Select Automatically’ đi và chọn một userAgent nào đó trong danh sách hoặc tự điền vào nhé</p>
<p><img src="/img/chinh-useragent-3.png" alt=""></p>
</li>
</ol>
<p><em>Lưu ý những thay đổi này chỉ là tạm thời và áp dụng được khi Devtool vẫn còn bật và trên tab đó thôi nhé</em></p>
]]></content:encoded>
      
      <comments>https://devnhanguoita.com/posts/Chinh-userAgent-trong-Chrome/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Programmer Day</title>
      <link>https://devnhanguoita.com/posts/Programmer-Day/</link>
      <guid>https://devnhanguoita.com/posts/Programmer-Day/</guid>
      <pubDate>Wed, 13 Sep 2017 10:01:09 GMT</pubDate>
      <description>
      
        Ngày dành riêng cho lập trình viên, để tôn vinh những cống hiến của họ. Đó là ngày nào vậy?
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="Hom-nay-la-Programmer-Day"><a href="#Hom-nay-la-Programmer-Day" class="headerlink" title="Hôm nay là Programmer Day."></a>Hôm nay là Programmer Day.</h3><p>Ngày dành cho những người làm công việc lập trình như chúng ta! Ngày để vinh danh những đóng góp tích cực giúp thay đổi cuộc sống mỗi ngày của các lập trình viên :)</p>
<p>Ngày này bắt nguồn ở Nga, và cũng đã được công nhận chính thức ở nhiều nước khác trên thế giới.</p>
<p>Ngày lập trình viên là ngày thứ <code>256</code> của năm, và năm nay nó rơi vào ngày 13 tháng 9.</p>
<h3 id="Tai-sao-la-ngay-thu-256"><a href="#Tai-sao-la-ngay-thu-256" class="headerlink" title="Tại sao là ngày thứ 256?"></a>Tại sao là ngày thứ 256?</h3><p>256 là giá trị số tối đa mà 1 byte (8 bits) thể hiện được trong hệ nhị phân. Hơn nữa 256 cũng là giá trị số lớn nhất của mũ 2 mà nhỏ hơn 365.<br>Một con số rất quen thuộc với các lập trình viên.</p>
<p>Hãy cùng nhau thay đổi tương lai của mọi người !<br>Happy Programmer Day!</p>
<p>Xem thêm ở đây: <a href="https://en.m.wikipedia.org/wiki/Day_of_the_Programmer" target="_blank" rel="external">https://en.m.wikipedia.org/wiki/Day_of_the_Programmer</a></p>
]]></content:encoded>
      
      <comments>https://devnhanguoita.com/posts/Programmer-Day/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Trở thành dev con nhà người ta</title>
      <link>https://devnhanguoita.com/posts/Tro-thanh-dev-con-nha-nguoi-ta/</link>
      <guid>https://devnhanguoita.com/posts/Tro-thanh-dev-con-nha-nguoi-ta/</guid>
      <pubDate>Sat, 19 Aug 2017 03:22:01 GMT</pubDate>
      <description>
      
        Một số điều rút ra được từ các dev con nhà người ta về việc làm thế nào để trở thành developer tốt hơn..
      
      </description>
      
      <content:encoded><![CDATA[<p>Một số điều rút ra được từ các ‘dev con nhà người ta’ để trở thành developer tốt hơn..</p>
<h3 id="Doc-code-cua-nguoi-khac"><a href="#Doc-code-cua-nguoi-khac" class="headerlink" title="Đọc code của người khác"></a>Đọc code của người khác</h3><p>Đọc code của người khác và học hỏi từ họ. Các nơi lưu trữ code mã nguồn mở như Github là một nơi cực kì tốt cho bạn học code từ những developer khác. Bạn sẽ học được rất nhiều thứ đấy, từ cách tổ chức, cấu trúc thư mục đến cách làm việc của một công nghệ ABC nào đó, ..</p>
<h3 id="Nho-ai-do-doc-code-cua-minh"><a href="#Nho-ai-do-doc-code-cua-minh" class="headerlink" title="Nhờ ai đó đọc code của mình"></a>Nhờ ai đó đọc code của mình</h3><p>Thường xuyên nhờ người khác review code cho mình, cũng như thường xuyên pair programming với đồng nghiệp sẽ giúp bạn khá nhiều đấy.<br>Những người có nhiều kinh nghiệm hơn sẽ giúp bạn thấy các vấn đề mà nếu chỉ làm một mình thì bạn sẽ khó mà nhận ra được. Có thể là cách để refactor đoạn code nào đó đẹp hơn, dễ hiểu hơn, hay đơn giản là đặt tên biến có ý nghĩa hơn.</p>
<p><img src="/img/10_ways_pair.jpg" alt="Pair Programming"></p>
<h3 id="Fix-bug-truoc-khi-viet-code-moi"><a href="#Fix-bug-truoc-khi-viet-code-moi" class="headerlink" title="Fix bug trước khi viết code mới"></a>Fix bug trước khi viết code mới</h3><p>Bạn phát hiện ra một bug nhưng nghĩ “thôi, mình fix nó sau vậy, làm những tính năng này trước đã”. Hoặc bạn thấy một test case bị lỗi, nhưng không tìm hiểu tại sao nó lại lỗi, bạn comment test case đó đi.<br>Hãy tạo thói quen fix bug, giải quyết các issue tồn đọng sớm cho mình trước khi bắt tay vào code những tính năng mới, đừng để “technical debt” nhé, trả không nổi đâu :D</p>
<p><img src="/img/10_ways_bugs_comming.png" alt="Bugs comming"></p>
<h3 id="Hoc-cong-nghe-moi"><a href="#Hoc-cong-nghe-moi" class="headerlink" title="Học công nghệ mới"></a>Học công nghệ mới</h3><p>Luôn luôn học, cập nhật các công nghệ mới khi nào có thể. Một công nghệ X đang thịnh hành bây giờ nhưng chắc gì 5 - 10 năm sau vẫn còn được ưa chuộng. Hãy thử học cái gì đó mới xem sao, nếu bạn đang làm iOS, sao không thử làm web bằng Ruby on Rails chẳng hạn :)</p>
<h4 id="con-cap-nhat"><a href="#con-cap-nhat" class="headerlink" title="còn cập nhật"></a>còn cập nhật</h4>]]></content:encoded>
      
      <comments>https://devnhanguoita.com/posts/Tro-thanh-dev-con-nha-nguoi-ta/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Validate string trong python</title>
      <link>https://devnhanguoita.com/posts/Validate-string-trong-python/</link>
      <guid>https://devnhanguoita.com/posts/Validate-string-trong-python/</guid>
      <pubDate>Sat, 12 Aug 2017 04:21:16 GMT</pubDate>
      <description>
      
        Kiểm tra nhanh một chuỗi trong python có phải là chuỗi toàn số không hoặc là chuỗi toàn chữ không? Python có sẵn những phương thức này cho bạn...
      
      </description>
      
      <content:encoded><![CDATA[<p>Đôi lúc bạn muốn kiểm tra xem một chuỗi có phải là toàn là số hay không, hoặc một chuỗi toàn chữ viết hoa hay không. Hãy tham khảo một số hàm xây dựng sẵn trong python giúp validate chuỗi sau đây:</p>
<h3 id="1-isalnum"><a href="#1-isalnum" class="headerlink" title="1. isalnum()"></a>1. isalnum()</h3><p>Hàm này kiểm tra các kí tự trong chuỗi có phải là chữ hoặc số hay không (alphanumeric) (a-z, A-Z và 0-9)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;&gt; <span class="keyword">print</span> <span class="string">'abc123'</span>.isalnum()</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">'xyz123#'</span>.isalnum()</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure>
<h3 id="2-isalpha"><a href="#2-isalpha" class="headerlink" title="2. isalpha()"></a>2. isalpha()</h3><p>Kiểm tra các kí tự trong chuỗi có phải là chữ hay không (a-z và A-Z)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">'abcD'</span>.isalpha()</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">'abcd1'</span>.isalpha()</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure></p>
<h3 id="3-isdigit"><a href="#3-isdigit" class="headerlink" title="3. isdigit()"></a>3. isdigit()</h3><p>Kiếm tra các kí tự trong chuỗi chỉ là số hay không (0-9)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">'1234'</span>.isdigit()</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">'123@abc'</span>.isdigit()</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure></p>
<h3 id="4-islower"><a href="#4-islower" class="headerlink" title="4. islower()"></a>4. islower()</h3><p>Kiểm tra xem có phải tất cả các kí tự trong một chuỗi là viết thường hay không<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">'abcd123#'</span>.islower()</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">'Abcd123#'</span>.islower()</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure></p>
<h3 id="5-isupper"><a href="#5-isupper" class="headerlink" title="5. isupper()"></a>5. isupper()</h3><p>Ngược lại với <code>islower()</code>, phương thức này kiểm tra xem có phải tất cả các kí tự trong một chuỗi là viết hoa hay không.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">'ABCD123#'</span>.isupper()</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">'Abcd123#'</span>.isupper()</div><div class="line"><span class="keyword">False</span></div></pre></td></tr></table></figure></p>
<p>Happy coding!</p>
]]></content:encoded>
      
      <comments>https://devnhanguoita.com/posts/Validate-string-trong-python/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Xử lí chuỗi cơ bản trong Python</title>
      <link>https://devnhanguoita.com/posts/Xu-li-chuoi-co-ban-trong-Python/</link>
      <guid>https://devnhanguoita.com/posts/Xu-li-chuoi-co-ban-trong-Python/</guid>
      <pubDate>Tue, 08 Aug 2017 15:37:57 GMT</pubDate>
      <description>
      
        Ghi chép về những phương thức xử lí chuỗi cơ bản trong Python như tìm chuỗi con, thay thế, lowercase..
      
      </description>
      
      <content:encoded><![CDATA[<p>Những ghi chép của một Dev đang tập tành học Python về các hàm xử lí chuỗi.</p>
<p>Giả sử mình có chuỗi sau nhé:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sample = <span class="string">"Dev nha nguoi ta"</span></div></pre></td></tr></table></figure></p>
<h3 id="1-Viet-thuong-lowercase"><a href="#1-Viet-thuong-lowercase" class="headerlink" title="1. Viết thường - lowercase"></a>1. Viết thường - lowercase</h3><p>Dùng hàm <code>lower()</code> để chuyển một chuỗi bất kì thành chuỗi viết thường<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>sample.lower()</div><div class="line"><span class="string">'dev nha nguoi ta'</span></div></pre></td></tr></table></figure></p>
<h3 id="2-Viet-hoa-UPPERCASE"><a href="#2-Viet-hoa-UPPERCASE" class="headerlink" title="2. Viết hoa - UPPERCASE"></a>2. Viết hoa - UPPERCASE</h3><p>Ngược lại, cũng có hàm <code>upper()</code> để viết hoa chuỗi đó<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>sample.upper()</div><div class="line"><span class="string">'DEV NHA NGUOI TA'</span></div></pre></td></tr></table></figure></p>
<h3 id="3-Viet-hoa-ki-tu-dau-tien-Capitalize"><a href="#3-Viet-hoa-ki-tu-dau-tien-Capitalize" class="headerlink" title="3. Viết hoa kí tự đầu tiên - Capitalize"></a>3. Viết hoa kí tự đầu tiên - Capitalize</h3><p><code>capitalize()</code> để viết hoa kí tự đầu tiên</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">"hello world"</span>.capitalize()</div><div class="line"><span class="string">'Hello world'</span></div></pre></td></tr></table></figure>
<h3 id="4-Chuoi-con"><a href="#4-Chuoi-con" class="headerlink" title="4. Chuỗi con"></a>4. Chuỗi con</h3><p>Lấy chuỗi con ở các vị trí của chuỗi, theo một trong những cách sau:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>sample[<span class="number">4</span>:<span class="number">13</span>]</div><div class="line"><span class="string">'nha nguoi'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sample[<span class="number">4</span>:]</div><div class="line"><span class="string">'nha nguoi ta'</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sample[:<span class="number">7</span>]</div><div class="line"><span class="string">'Dev nha'</span></div></pre></td></tr></table></figure></p>
<h3 id="5-Tim-chuoi-con"><a href="#5-Tim-chuoi-con" class="headerlink" title="5. Tìm chuỗi con"></a>5. Tìm chuỗi con</h3><p>Sử dụng hàm <code>find()</code> để tìm xem một chuỗi con có thuộc một chuỗi hay không. Hàm này trả về kết quả là vị trí bắt đầu của chuỗi con đó, và trả về -1 nếu không tìm thấy.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>sample.find(<span class="string">'nguoi'</span>)</div><div class="line"><span class="number">8</span></div></pre></td></tr></table></figure></p>
<p>Hàm <code>rfind()</code> tìm như <code>find()</code> nhưng theo chiều từ bên phải qua<br>Hãy so sánh:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>sample.rfind(<span class="string">'a'</span>)</div><div class="line"><span class="number">15</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sample.find(<span class="string">'a'</span>)</div><div class="line"><span class="number">6</span></div></pre></td></tr></table></figure></p>
<h3 id="6-Thay-the"><a href="#6-Thay-the" class="headerlink" title="6. Thay thế"></a>6. Thay thế</h3><p>Đơn giản với hàm <code>replace()</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>sample.replace(<span class="string">"nguoi ta"</span>, <span class="string">"minh"</span>)</div><div class="line">  <span class="string">'Dev nha minh'</span></div></pre></td></tr></table></figure></p>
]]></content:encoded>
      
      <comments>https://devnhanguoita.com/posts/Xu-li-chuoi-co-ban-trong-Python/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Học CSS thông qua game</title>
      <link>https://devnhanguoita.com/posts/Hoc-CSS-thong-qua-game/</link>
      <guid>https://devnhanguoita.com/posts/Hoc-CSS-thong-qua-game/</guid>
      <pubDate>Thu, 27 Jul 2017 14:44:11 GMT</pubDate>
      <description>
      
        Học CSS hấp dẫn, thú vị hơn thông qua games. Tại sao không? Hãy thử các game sau xem bạn sẽ học được gì nhé.
      
      </description>
      
      <content:encoded><![CDATA[<p>Lười viết mở bài quá, thôi vào thân bài luôn nha. Dưới đây là danh sách một số nguồn mình tổng hợp được để học CSS một cách thú vị hơn:</p>
<h2 id="1-Grid-Garden"><a href="#1-Grid-Garden" class="headerlink" title="1. Grid Garden"></a>1. Grid Garden</h2><p>Link: <a href="http://cssgridgarden.com/" target="_blank" rel="external">http://cssgridgarden.com/</a><br>Trang web này giới thiệu cho các bạn về Grid Layout. Hoàn thành 28 level của game, bạn sẽ học được nhiều thứ về Grid layout đấy.</p>
<p><img src="/img/css-grid-garden.png" alt="Grid Garden"></p>
<h2 id="2-Flexbox-Froggy"><a href="#2-Flexbox-Froggy" class="headerlink" title="2. Flexbox Froggy"></a>2. Flexbox Froggy</h2><p>Link: <a href="http://flexboxfroggy.com/" target="_blank" rel="external">http://flexboxfroggy.com/</a><br>Tương tự và của cùng tác giả của Grid Garden, Flexbox Froggy là một “tựa game” để bạn học về flexbox.<br>Xuyên suốt 24 level của game, bạn sẽ học được nhiều thuộc tính của flexbox như: <code>justify-content</code>, <code>flex-flow</code>, <code>align-items</code>, ..</p>
<p><img src="/img/css-flexbox.png" alt="Flexbox Froggy"></p>
<h2 id="3-CSS-Dinner"><a href="#3-CSS-Dinner" class="headerlink" title="3. CSS Dinner"></a>3. CSS Dinner</h2><p>Link: <a href="http://flukeout.github.io/" target="_blank" rel="external">http://flukeout.github.io/</a><br>Game này hơi khó nhằn hơn nhé, bạn sẽ được học về <code>selector</code> trong CSS như class, id, child,… với các level có độ khó tăng dần.</p>
<p><img src="/img/css-dinner.png" alt="CSS Dinner"></p>
<h2 id="4-Flexbox-Defense"><a href="#4-Flexbox-Defense" class="headerlink" title="4. Flexbox Defense"></a>4. Flexbox Defense</h2><p>Link: <a href="http://www.flexboxdefense.com/" target="_blank" rel="external">http://www.flexboxdefense.com/</a><br>Thêm một game nữa về <code>flexbox</code></p>
<p><img src="/img/css-flexbox-defense.png" alt="Flexbox Defense"></p>
<p>Chúc các bạn chơi vui vẻ :p</p>
]]></content:encoded>
      
      <comments>https://devnhanguoita.com/posts/Hoc-CSS-thong-qua-game/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Code sạch nhà người ta: Viết hàm sạch</title>
      <link>https://devnhanguoita.com/posts/Code-sach-nha-nguoi-ta-Viet-ham-sach-hon/</link>
      <guid>https://devnhanguoita.com/posts/Code-sach-nha-nguoi-ta-Viet-ham-sach-hon/</guid>
      <pubDate>Sun, 23 Jul 2017 07:04:08 GMT</pubDate>
      <description>
      
        Dev con nhà người ta tổ chức các hàm, phương thức của mình như thế nào để code luôn sạch sẽ, khô thoáng? Khám phá ngay một số tip sau đây.
      
      </description>
      
      <content:encoded><![CDATA[<p>Bài viết này nằm trong series <a href="/categories/Code-sach-nha-nguoi-ta/">“Code sạch nhà người ta”</a> - là tập hợp những kinh nghiệm rút ra được từ quyển Clean Code nổi tiếng của Uncle Bob.</p>
<p>Trong bài này mình sẽ tóm tắt lại, trình bày một số thứ mà các Dev nhà người ta đã làm để viết, tổ chức các Hàm trong chương trình của họ tốt hơn, đẹp hơn và sạch hơn.</p>
<p>Ok, đi vào vấn đề luôn nhé, … sẽ có một số điều cần nhớ sau đây:</p>
<h3 id="Nho"><a href="#Nho" class="headerlink" title="# Nhỏ"></a># Nhỏ</h3><p>Nguyên tắc thứ nhất của hàm là nó nên nhỏ thôi. Nguyên tắc thứ hai là nó nên nhỏ hơn nữa 😃.<br>Một hàm nên có số lượng dòng code dưới 20 và dưới 150 kí tự trên mỗi dòng.<br>Nếu bạn có một hàm quá dài, hãy cố gắng làm nhỏ nó lại bằng cách tách ra các hàm con khác.</p>
<h3 id="Do-One-Thing-Lam-mot-viec-thoi"><a href="#Do-One-Thing-Lam-mot-viec-thoi" class="headerlink" title="# Do One Thing: Làm một việc thôi"></a># Do One Thing: Làm một việc thôi</h3><p>Một hàm chỉ nên làm một việc, và chỉ làm tốt việc đó thôi. Rõ ràng rồi, đừng viết một hàm kiểu lẩu thập cẩm, một hàm chỉ nên giải quyết một vấn đề thôi.</p>
<p>Xem xét ví dụ sau:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">emailClients</span>(<span class="params">clients</span>) </span>&#123;</div><div class="line">  clients.forEach(<span class="function">(<span class="params">client</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> clientRecord = database.lookup(client);</div><div class="line">    <span class="keyword">if</span> (clientRecord.isActive()) &#123;</div><div class="line">      email(client);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Hàm emailClients trên đang làm nhiều hơn 1 việc, nó phải tìm record của client đó, kiểm tra active hay không sau đó mới gửi email nếu record đó active. Chúng ta có thể tách ra như sau:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">emailClients</span>(<span class="params">clients</span>) </span>&#123;</div><div class="line">  clients</div><div class="line">    .filter(isClientActive)</div><div class="line">    .forEach(email);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isClientActive</span>(<span class="params">client</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> clientRecord = database.lookup(client);</div><div class="line">  <span class="keyword">return</span> clientRecord.isActive();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Doi-so-cua-ham"><a href="#Doi-so-cua-ham" class="headerlink" title="# Đối số của hàm"></a># Đối số của hàm</h3><p>Số lượng đối số lý tưởng cho một hàm là 0. Một hàm với 1 hoặc 2 đối số thì cũng có thể chấp nhận được, tuy nhiên lý tưởng nhất vẫn là một hàm không cần đối số.<br>Hàm với nhiều đối số sẽ làm cho code của bạn phức tạp hơn và khó để test được hơn, vì vậy hãy cố gắng gọi hàm với ít đối số nhất có thể.</p>
<p>Khi cần truyền nhiều hơn 2 hoặc 3 đối số, hãy cân nhắc sử dụng các cấu trúc khác để thay thế.</p>
<p>Ví dụ:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">Circle <span class="title">makeCircle</span><span class="params">(Point center, <span class="keyword">double</span> radius)</span></span>;</div></pre></td></tr></table></figure></p>
<p>thì tốt hơn là<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">Circle <span class="title">makeCircle</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y, <span class="keyword">double</span> radius)</span></span>;</div></pre></td></tr></table></figure></p>
<h3 id="Tranh-anh-huong-phu"><a href="#Tranh-anh-huong-phu" class="headerlink" title="# Tránh ảnh hưởng phụ"></a># Tránh ảnh hưởng phụ</h3><p>Hàm chỉ làm gì đó hoặc trả lời thứ gì đó, nhưng không phải là cả hai nhé. Nếu một hàm làm nhiều hơn việc nhận giá trị đầu vào và trả về một hoặc nhiều giá trị, thì nghĩa là nó đang tạo ra những ảnh hưởng phụ (side effects). Những ảnh hưởng này có thể là ghi file, thay đổi biến toàn cục, ..</p>
<p>Ví dụ:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> name = <span class="string">'Dev Nhà Mình'</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">splitIntoFirstAndLastName</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  name = name.split(<span class="string">' '</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">splitIntoFirstAndLastName();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(name); <span class="comment">// ['Dev', 'Nhà', 'Mình'];</span></div></pre></td></tr></table></figure></p>
<p>Trong gọi hàm trên, biến toàn cục <code>name</code> đã bị thay đổi.<br>Ta sẽ refactor đoạn code đó như sau:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">splitIntoFirstAndLastName</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> name.split(<span class="string">' '</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> name = <span class="string">'Dev Nhà Mình'</span>;</div><div class="line"><span class="keyword">const</span> newName = splitIntoFirstAndLastName(name);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(name); <span class="comment">// 'Dev Nhà Mình';</span></div><div class="line"><span class="built_in">console</span>.log(newName); <span class="comment">// ['Dev', 'Nhà', 'Mình'];</span></div></pre></td></tr></table></figure>
<h3 id="Ten-ham-co-nghia"><a href="#Ten-ham-co-nghia" class="headerlink" title="# Tên hàm có nghĩa"></a># Tên hàm có nghĩa</h3><p>Đặt những tên có nghĩa. Xem thêm bài viết <a href="/posts/Code-sach-nha-nguoi-ta-Dat-ten-cho-con/">Đặt tên cho biến</a><br>Tên hàm nên là các Động từ hoặc cụm động từ, ví dụ như <code>handleXYZ</code>, <code>getXYZ</code> hay <code>calculateABC</code></p>
<h3 id="DRY-kho-thoang"><a href="#DRY-kho-thoang" class="headerlink" title="# DRY: khô thoáng"></a># DRY: khô thoáng</h3><p>Điều cuối cùng, hãy giữ cho codebase của bạn khô thoáng mỗi ngày với.. DRY. DRY là viết tắt của cụm từ <code>Don&#39;t Repeat Yourself</code> - Đừng lặp lại những gì giống nhau.<br>Có một câu nói của bởi ai đó như thế này:</p>
<blockquote>
<p>Code bị duplicate có thể là nguyên nhân của mọi sự rắc rối trong phần mềm.</p>
</blockquote>
<p>Nếu muốn viết nhiều đoạn code khác nhau ở nhiều chỗ khác nhau thực hiện một công việc giống nhau, hãy viết một hàm chung sau đó gọi ở những chỗ chúng ta cần dùng thay vì copy paste ra nhiều chỗ khác nhau.</p>
<p>Hãy tưởng tượng bạn có 18 hàm tính số tiền khi mua hàng ở 18 nơi có thể trên một website thương mại. Bạn có nhu cầu sửa công thức tính tiền, bạn phải sửa cả 18 chỗ có hàm đó 😕, và sẽ ra sao nếu bạn làm thiếu? 😱..<br>Bởi vậy, ráng giữ khô thoáng nhé</p>
<p>Happy coding!</p>
]]></content:encoded>
      
      <comments>https://devnhanguoita.com/posts/Code-sach-nha-nguoi-ta-Viet-ham-sach-hon/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Khi chuyện của dev không còn là của riêng dev</title>
      <link>https://devnhanguoita.com/posts/Khi-chuyen-cua-dev-khong-con-la-cua-rieng-dev/</link>
      <guid>https://devnhanguoita.com/posts/Khi-chuyen-cua-dev-khong-con-la-cua-rieng-dev/</guid>
      <pubDate>Mon, 10 Jul 2017 13:04:01 GMT</pubDate>
      <description>
      
        &lt;p&gt;Gần đây có một trang web cho phép người dùng anonymous đăng tải các review về các công ty công nghệ một cách thoải mái. Hiện tại trang nà
      
      </description>
      
      <content:encoded><![CDATA[<p>Gần đây có một trang web cho phép người dùng anonymous đăng tải các review về các công ty công nghệ một cách thoải mái. Hiện tại trang này đang trong tình trạng bảo trì rồi, nên mình không đưa link ở đây (tuy nhiên chắc các dev nhà ta cũng biết là trang nào rồi 😅).</p>
<p>Mọi chuyện cũng chẳng có gì nếu như không có những thông tin, theo các nguồn tin mình biết được, cũng như thông qua theo dõi các reviews trên trang đó những ngày qua, rằng có những reviews không biết thật giả, làm ảnh hưởng đến uy tín, danh dự của các tổ chức, cá nhân (cụ thể là HR)</p>
<p>Chắc tác giả cũng không nghĩ đến chủ đề này lại hot như vậy. Mình đoán tình hình cũng đi xa hơn mục đích ban đầu của tác giả rồi.</p>
<p>Nhân tiện blog này có mục <a href="/categories/Chuyen-cua-Dev/">“Chuyện của Dev”</a> vô tình trùng với từ khoá đang hot này, nên mình cũng xin đưa ra vài ý kiến cá nhân về việc ảnh hưởng của các review xấu đối với bạn và cộng đồng như thế nào.</p>
<h3 id="Ton-hai-den-hinh-anh-cua-ban"><a href="#Ton-hai-den-hinh-anh-cua-ban" class="headerlink" title="Tổn hại đến hình ảnh của bạn"></a>Tổn hại đến hình ảnh của bạn</h3><p>Giả sử, xem trường hợp này nhé: Bạn apply một job “ngon”, CV rất tốt và hoàn toàn phù hợp với vị trí đó. Bạn HR ngồi xem CV của bạn, và thấy “ồ cái tên này quen quen, hình như hôm bữa thấy nó nói xấu công ty A nè, vô công ty rồi chắc nó cũng nói xấu công ty thôi. Thôi bai bai chú em, em rất tốt nhưng anh rất tiếc..”</p>
<p>Bạn nghĩ trường hợp này không thể xảy ra ư? mình review anonymous rồi mà, làm sao người ta biết được? Thật ra trường hợp này mình cũng chả biết 😃. Tuy nhiên, trường hợp có người mạo danh bạn thì rất dễ xảy ra. Bạn có gây thù chuốc oán với ai, người ta mượn tên mình để đi nói xấu người khác. Mình đã thấy một trường hợp như vậy trên site đó rồi, tiếc là không chụp hình lại :)</p>
<h3 id="Anh-huong-den-uy-tin-nguoi-khac"><a href="#Anh-huong-den-uy-tin-nguoi-khac" class="headerlink" title="Ảnh hưởng đến uy tín người khác"></a>Ảnh hưởng đến uy tín người khác</h3><p>Cái này mình cũng chả tin cho đến khi đọc được rất nhiều comments xấu, tiêu cực mang tính châm chọc, hướng tới một số đối tượng ở các công ty (mà chủ yếu là nữ, HR và các quản lí). Các thông tin mang tính nói xấu, thậm chí là xúc phạm đến đời sống cá nhân của người khác.</p>
<p>Hãy google thông tin gần đây có 2 nữ sinh suýt tự tử vì bị tung tin đồn thất thiệt trên facebook, để thấy sức mạnh của truyền thông làm một việc không có thật ảnh hưởng đến người khác như thế nào. Hi vọng các bạn sẽ cân nhắc hơn ghi vừa gõ bàn phím phán xét người khác vừa cưởi hả hê nhé.</p>
<h3 id="Hay-la-mot-Dev-tu-te"><a href="#Hay-la-mot-Dev-tu-te" class="headerlink" title="Hãy là một Dev tử tế"></a>Hãy là một Dev tử tế</h3><p>Nếu bạn bất mãn với công ty mình đang làm chỗ nào, không thích hay muốn công ty cải thiện điều gì, hoặc giả muốn tăng lương gấp đôi, gấp ba, hãy mạnh dạn nói rõ với công ty để giữa hai bên cùng nhau giải quyết.</p>
<p>Nếu bạn muốn review công ty để những dev khác biết, hãy lên các trang chính thống, mình biết ở Việt Nam có trang <a href="https://itviec.com" target="_blank" rel="external">ITviec</a> cho phép bạn đăng những review về các công ty công nghệ, các bạn có thể lên đó để review.</p>
<p>Hãy làm một dev tử tế!</p>
<h3 id="Tom-lai"><a href="#Tom-lai" class="headerlink" title="Tóm lại"></a>Tóm lại</h3><p>Như tiêu đề bài viết, trong thời buổi công nghệ này, chuyện của bạn đã không còn là của riêng bạn nữa rồi, nhất là trong điều kiện truyền thông mạnh mẽ và dễ dàng như hiện nay. Vì vậy, bút sa gà xối mỡ gì đấy, hãy cẩn thận với lời ăn tiếng nói của mình.</p>
<p>Welcome mọi ý kiến của các bạn 👇</p>
]]></content:encoded>
      
      <comments>https://devnhanguoita.com/posts/Khi-chuyen-cua-dev-khong-con-la-cua-rieng-dev/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
